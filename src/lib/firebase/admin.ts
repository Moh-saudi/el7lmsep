import { initializeApp, getApps, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';

let isInitialized = false;
let isDisabled = false;

export function initializeFirebaseAdmin() {
  if (isInitialized || getApps().length > 0) {
    return;
  }

  // ÿ™ÿπÿ∑ŸäŸÑ Firebase ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ®ŸÜÿßÿ° ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ŸÖŸàÿ¨ŸàÿØÿ©
  if (process.env.NODE_ENV === 'production' && process.env.NEXT_PHASE === 'phase-production-build') {
    const projectId = process.env.FIREBASE_PROJECT_ID || process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID;
    const privateKey = process.env.FIREBASE_PRIVATE_KEY;
    const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;
    
    if (!projectId || !privateKey || !clientEmail) {
      console.log('‚ö†Ô∏è Firebase Admin disabled during build - missing environment variables');
      isDisabled = true;
      return;
    }
  }

  try {
    console.log('üîß Initializing Firebase Admin SDK...');
    
    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶Ÿäÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
    const projectId = process.env.FIREBASE_PROJECT_ID || process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID;
    const privateKey = process.env.FIREBASE_PRIVATE_KEY;
    const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;
    
    console.log('üìã Environment variables check:');
    console.log('Project ID:', projectId ? '‚úÖ Set' : '‚ùå Missing');
    console.log('Private Key:', privateKey ? '‚úÖ Set' : '‚ùå Missing');
    console.log('Client Email:', clientEmail ? '‚úÖ Set' : '‚ùå Missing');
    
    if (!projectId) {
      throw new Error('FIREBASE_PROJECT_ID is required');
    }
    
    if (privateKey && clientEmail) {
      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ service account credentials
      console.log('üîê Using service account credentials');
      
      // ÿ™ŸÜÿ∏ŸäŸÅ private key (ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™ ÿ•ÿ∞ÿß Ÿàÿ¨ÿØÿ™)
      let cleanPrivateKey = privateKey;
      
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ \nÿå ÿßÿ≥ÿ™ÿ®ÿØŸÑŸá ÿ®ÿ≥ÿ∑Ÿàÿ± ÿ¨ÿØŸäÿØÿ©
      if (privateKey.includes('\\n')) {
        cleanPrivateKey = privateKey.replace(/\\n/g, '\n');
      }
      
      // ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ ÿ®ÿØŸàŸÜ \nÿå ÿ£ÿ∂ŸÅ ÿ≥ÿ∑Ÿàÿ± ÿ¨ÿØŸäÿØÿ©
      if (!cleanPrivateKey.includes('\n')) {
        cleanPrivateKey = cleanPrivateKey.replace(
          /(-----BEGIN PRIVATE KEY-----)(.*?)(-----END PRIVATE KEY-----)/s,
          '$1\n$2\n$3'
        );
      }
      
      initializeApp({
        credential: cert({
          projectId: projectId,
          privateKey: cleanPrivateKey,
          clientEmail: clientEmail,
        }),
        projectId: projectId,
      });
      
      console.log('‚úÖ Firebase Admin initialized with service account');
    } else {
      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ default credentials (ŸÅŸä production ÿ£Ÿà development)
      console.log('üîê Using default credentials');
      
      initializeApp({
        projectId: projectId,
      });
      
      console.log('‚úÖ Firebase Admin initialized with default credentials');
    }
    
    isInitialized = true;
    
  } catch (error: any) {
    console.error('‚ùå Failed to initialize Firebase Admin:');
    console.error('Error code:', error.code);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    console.log('üí° Troubleshooting tips:');
    console.log('1. Check FIREBASE_PROJECT_ID environment variable');
    console.log('2. Verify FIREBASE_PRIVATE_KEY format (should include \\n)');
    console.log('3. Ensure FIREBASE_CLIENT_EMAIL is correct');
    console.log('4. Download service account key from Firebase Console');
    console.log('5. Make sure .env.local file exists and is loaded');
    
    // ŸÑÿß ŸÜÿ±ŸÖŸä ÿßŸÑÿÆÿ∑ÿ£ÿå ŸÅŸÇÿ∑ ŸÜÿ™ÿ±ŸÉŸá ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸá ŸÑÿßÿ≠ŸÇÿßŸã
  }
}

export function getAdminDb() {
  if (isDisabled) {
    throw new Error('Firebase Admin is disabled - missing environment variables');
  }
  initializeFirebaseAdmin();
  return getFirestore();
}

// ÿ™ŸáŸäÿ¶ÿ© ÿ™ŸÑŸÇÿßÿ¶Ÿäÿ© ŸÑŸÑÿ™ŸàÿßŸÅŸÇ ŸÖÿπ ÿßŸÑŸÉŸàÿØ ÿßŸÑŸÇÿØŸäŸÖ
if (typeof window === 'undefined') {
  initializeFirebaseAdmin();
}

// ÿ™ÿµÿØŸäÿ± ÿ¢ŸÖŸÜ ŸÑŸÑŸÄ adminDb
export const adminDb = (() => {
  try {
    return getFirestore();
  } catch (error) {
    console.warn('‚ö†Ô∏è Firebase Admin not available:', error.message);
    return null;
  }
})(); 
