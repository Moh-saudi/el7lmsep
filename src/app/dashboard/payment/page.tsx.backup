// ============================================
// نظام عرض الأسعار والدفع الإلكتروني
// ============================================
// 
// كيف يعمل النظام:
// 1. يجلب دولة المستخدم من ملفه الشخصي (users/players collection)
// 2. يعرض الأسعار بعملة دولة المستخدم (تحويل من الجنيه المصري)
// 3. عند الدفع عبر البطاقة: يتم التحويل خفياً للجنيه المصري لجيديا
// 4. المستخدم يرى فقط الأسعار بعملته المحلية
// 5. نظام تحديث أسعار الصرف يعمل تلقائياً
//
// مثال:
// - مستخدم سعودي: يرى السعر 5 ر.س
// - عند الدفع: يتم خصم 70 ج.م من جيديا (خفياً)
// - المستخدم لا يرى عملية التحويل
//
// ============================================

'use client';

import DashboardLayout from "@/components/layout/DashboardLayout.jsx";
import GeideaPaymentModal from "@/components/GeideaPaymentModal";
import { auth, db } from '@/lib/firebase/config';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import 'react-photo-view/dist/react-photo-view.css';
import GeideaConfigAlert from "@/components/GeideaConfigAlert";
import GeideaConfigAlertModal from "@/components/GeideaConfigAlertModal";
import ApplePayButton from "@/components/ApplePayButton";
import { convertToEGPSync, convertFromEGP, getCurrencyByCountry, formatConversionDisplay, type ConversionResult } from '@/lib/currency-converter';


// أنواع البيانات
interface PackageType {
  title: string;
  price: number;
  originalPrice: number;
  period: string;
  discount: string;
  features: string[];
  popular: boolean;
  icon: string;
}

interface PaymentInfo {
  transactionNumber: string;
  packageType: string;
  amount: number;
  receiptUrl?: string;
  status: 'pending' | 'completed' | 'failed';
}

// تكوين الباقات (3 خطط)
const PACKAGES: Record<string, PackageType> = {
  '3months': {
    title: 'باقة النجم الصاعد ⭐',
    price: 70,
    originalPrice: 100,
    period: '3 شهور',
    discount: '30%',
    features: [
      'إنشاء ملف شخصي احترافي كامل',
      'إضافة صور وفيديوهات غير محدودة',
      'إمكانية التواصل مع الأندية مباشرة',
      'ظهور ملفك في نتائج البحث للأندية',
      'دعم فني عبر البريد الإلكتروني',
      'تحديث بياناتك في أي وقت',
      'إشعارات بالعروض الجديدة',
    ],
    popular: false,
    icon: '⭐'
  },
  '6months': {
    title: 'باقة النجم الذهبي 🏅',
    price: 120,
    originalPrice: 160,
    period: '6 شهور',
    discount: '25%',
    features: [
      'كل ميزات النجم الصاعد',
      'إعلانات مميزة في البحث',
      'دعم فني أسرع عبر الواتساب',
      'إمكانية إضافة روابط سوشيال ميديا',
      'تحليل أداء ملفك وزياراته',
      'أولوية في الظهور للأندية',
      'إشعار عند مشاهدة ملفك',
    ],
    popular: true,
    icon: '🏅'
  },
  '12months': {
    title: 'باقة النجم الأسطوري 👑',
    price: 180,
    originalPrice: 200,
    period: '12 شهر',
    discount: '10%',
    features: [
      'كل ميزات النجم الذهبي',
      'ترويج خاص على منصات التواصل الاجتماعي',
      'شهادة اشتراك مميزة',
      'استشارة مجانية مع خبير تسويق رياضي',
      'إمكانية تثبيت ملفك في أعلى نتائج البحث',
      'دعم فني VIP على مدار الساعة',
      'تقرير شهري مفصل عن أداء ملفك',
    ],
    popular: false,
    icon: '👑'
  }
};

// خيارات الدفع مع الأيقونات
const PAYMENT_METHODS = [
  { id: 'bank', name: 'تحويل بنكي', icon: '🏦' },
  { id: 'fawry', name: 'فوري', icon: '💸' },
  { id: 'apple', name: 'أبل باي', icon: '🍎' },
  { id: 'wallet', name: 'تحويل على محفظة', icon: '👛' }
];

// دول الخليج
const GULF_COUNTRIES = ['QA', 'SA', 'AE', 'KW', 'BH', 'OM'];

// حسّن دالة تحويل اسم الدولة إلى رمزها القياسي
function normalizeCountry(val: string | undefined | null): string {
  if (!val) return '';
  const map: Record<string, string> = {
    'قطر': 'QA', 'Qatar': 'QA',
    'السعودية': 'SA', 'Saudi Arabia': 'SA',
    'الإمارات': 'AE', 'UAE': 'AE', 'United Arab Emirates': 'AE',
    'الكويت': 'KW', 'Kuwait': 'KW',
    'البحرين': 'BH', 'Bahrain': 'BH',
    'عمان': 'OM', 'Oman': 'OM',
    'مصر': 'EG', 'Egypt': 'EG',
  };
  return map[val.trim()] || val.trim().toUpperCase();
}

export default function PaymentPage() {
  const router = useRouter();
  const [user, loading] = useAuthState(auth);
  const [selectedPackage, setSelectedPackage] = useState<string>('3months');
  const [paymentMethod, setPaymentMethod] = useState<string>('');
  const [transactionNumber, setTransactionNumber] = useState<string>('');
  const [receipt, setReceipt] = useState<File | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<boolean>(false);
  const [receiptInfo, setReceiptInfo] = useState({
    senderName: '',
    transferDate: '',
    notes: ''
  });
  const [bankInfo, setBankInfo] = useState({
    accountName: '',
    accountNumber: '',
    bankName: ''
  });
  const [showSuccessPopup, setShowSuccessPopup] = useState(false);
  const [subscriptionEnd, setSubscriptionEnd] = useState<string>('');
  const [paidAmount, setPaidAmount] = useState('');
  const [userCurrency, setUserCurrency] = useState({ code: 'SAR', symbol: 'ر.س' });
  const [userCountry, setUserCountry] = useState('');
  const [successMessage, setSuccessMessage] = useState<string>('');
  const [showGeideaModal, setShowGeideaModal] = useState(false);
  const [showCountryAlert, setShowCountryAlert] = useState(false);
  const [userData, setUserData] = useState<any>(null); // لتخزين بيانات المستخدم من Firestore
  const [currencyConversions, setCurrencyConversions] = useState<Record<string, ConversionResult>>({});

  // كود تشخيصي
  console.log('user:', user, 'loading:', loading);

  // التحقق من تسجيل الدخول
  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/login');
    }
  }, [user, loading, router]);

  // عند تغيير selectedPackage، حدّث قيمة paidAmount بالسعر الثابت
  useEffect(() => {
    const packagePrice = PACKAGES[selectedPackage]?.price || 0;
    setPaidAmount(packagePrice.toString());
  }, [selectedPackage]);

  // حسّن منطق جلب الدولة والعملة
  useEffect(() => {
    const fetchUserData = async () => {
      if (user) {
        try {
          // جلب من users
          const userDoc = await getDoc(doc(db, 'users', user.uid));
          let userData = {};
          if (userDoc.exists()) {
            userData = userDoc.data();
          }
          // جلب من players إذا لم توجد القيم في users
          let playerData = {};
          const playerDoc = await getDoc(doc(db, 'players', user.uid));
          if (playerDoc.exists()) {
            playerData = playerDoc.data();
          }
          // استخدم أول قيمة غير فارغة بين المجموعتين
          const country = (userData as any)?.country || (playerData as any)?.country || '';
          const city = (userData as any)?.city || (playerData as any)?.city || '';
          setUserData({ ...userData, country, city });
          // جلب الدولة من Firestore أو من user أو قيمة افتراضية
          let normalizedCountry = normalizeCountry(country)
            || normalizeCountry((user as any)?.country)
            || normalizeCountry((user as any)?.metadata?.country)
            || '';
          setUserCountry(normalizedCountry || '');
          // الحصول على العملة المحلية حسب الدولة (للعرض فقط)
          const localCurrency = getCurrencyByCountry(normalizedCountry);
          
          // تم اكتشاف عملة المستخدم بنجاح
          console.log(`💰 عملة المستخدم: ${localCurrency.code} (${localCurrency.name})`);
          
          setUserCurrency({ code: localCurrency.code, symbol: localCurrency.symbol });
          
          // الأسعار ثابتة لكل الدول - لا تحويل
          // نعرض نفس الأسعار مع رمز العملة المحلية فقط
          const conversions: Record<string, ConversionResult> = {};
          Object.entries(PACKAGES).forEach(([packageKey, packageData]) => {
            conversions[packageKey] = {
              originalAmount: packageData.price,
              originalCurrency: localCurrency,
              convertedAmount: packageData.price, // نفس السعر
              convertedCurrency: localCurrency,
              exchangeRate: 1,
              formattedOriginal: `${packageData.price} ${localCurrency.symbol}`,
              formattedConverted: `${packageData.price} ${localCurrency.symbol}`
            };
          });
          setCurrencyConversions(conversions);
        } catch (error) {
          console.error('Error fetching user data:', error);
        }
      }
    };
    fetchUserData();
  }, [user]);

  // منطق التحقق العصري
  useEffect(() => {
    // قائمة الدول المعتمدة (يمكنك استبدالها بقائمة ثابتة إذا أردت)
    const validCountries = [
      'مصر', 'السعودية', 'الإمارات', 'قطر', 'الكويت', 'البحرين', 'عمان', 'المغرب', 'الجزائر', 'تونس', 'ليبيا', 'السودان', 'العراق', 'سوريا', 'لبنان', 'الأردن', 'فلسطين', 'اليمن'
    ];
    // تحقق من الدولة والمدينة
    const countryValue = userData?.country || '';
    const cityValue = userData?.city || '';
    const isCountryValid = countryValue && validCountries.includes(countryValue);
    const isCityValid = !!cityValue;
    // لوجات توضيحية
    console.log('userCountry:', userCountry, 'Firestore country:', userData?.country, 'Firestore city:', userData?.city, 'isCountryValid:', isCountryValid, 'isCityValid:', isCityValid);
    // منطق إظهار البوب أب
    if (!isCountryValid || !isCityValid) setShowCountryAlert(true);
    else setShowCountryAlert(false);
  }, [userCountry, userData]);

  // معالجة دفع Geidea
  const handleGeideaPayment = async () => {
    if (!user) {
      setError('يجب تسجيل الدخول أولاً');
      return;
    }

    if (!selectedPackage) {
      setError('يرجى اختيار الباقة');
      return;
    }

    setSubmitting(true);
    setError('');

    try {
      // الحصول على السعر المحلي (الثابت) للباقة
      const localAmount = PACKAGES[selectedPackage].price;
      
      // تحويل المبلغ من العملة المحلية إلى الجنيه المصري للدفع
      let amountInEGP = localAmount;
      if (userCurrency.code !== 'EGP') {
        // تحويل من العملة المحلية إلى الجنيه المصري
        const conversionResult = convertToEGPSync(localAmount, userCurrency.code);
        amountInEGP = conversionResult.convertedAmount;
        console.log(`💰 تحويل الدفع: ${localAmount} ${userCurrency.symbol} = ${amountInEGP} ج.م`);
      }
      
      // إنشاء جلسة دفع بالجنيه المصري
      const response = await fetch('/api/geidea/create-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: Math.round(amountInEGP), // تقريب للأرقام الصحيحة
          currency: 'EGP', // العملة دائماً جنيه مصري لجيديا
          orderId: `PAY${Date.now()}`,
          customerEmail: user.email || '',
          customerName: user.displayName || 'مستخدم',
        }),
      });

      const data = await response.json();

      if (data.success) {
        // بدء عملية الدفع باستخدام GeideaCheckout
        startPayment(data.sessionId);
      } else {
        setError(data.details || 'فشل في إنشاء جلسة الدفع');
      }
    } catch (error) {
      console.error('Error creating payment session:', error);
      setError('حدث خطأ أثناء إنشاء جلسة الدفع. يرجى المحاولة مرة أخرى.');
    } finally {
      setSubmitting(false);
    }
  };

  // دالة لبدء عملية الدفع باستخدام sessionId
  const startPayment = (sessionId: string) => {
    if (typeof window !== 'undefined' && (window as any).GeideaCheckout) {
      const payment = new (window as any).GeideaCheckout(onPaymentSuccess, onPaymentError, onPaymentCancel);
      payment.startPayment(sessionId);
    } else {
      setError('مكتبة الدفع غير متاحة. يرجى إعادة تحميل الصفحة والمحاولة مرة أخرى.');
    }
  };

  // دالة عند النجاح
  const onPaymentSuccess = (data: any) => {
    console.log('Payment successful:', data);
    setSuccess(true);
    setSuccessMessage('تم الدفع بنجاح! سيتم تفعيل اشتراكك قريباً.');
    setTimeout(() => {
      router.push('/dashboard/payment/success');
    }, 2000);
  };

  // دالة عند حدوث خطأ
  const onPaymentError = (data: any) => {
    console.error('Payment error:', data);
    setError(data.error || 'حدث خطأ في الدفع. يرجى المحاولة مرة أخرى.');
  };

  // دالة عند إلغاء الدفع
  const onPaymentCancel = (data: any) => {
    console.log('Payment cancelled:', data);
    setError('تم إلغاء عملية الدفع. يمكنك المحاولة مرة أخرى.');
  };

  // معالجة نجاح الدفع
  const handlePaymentSuccess = (response: any) => {
    console.log('Payment successful:', response);
    setSuccess(true);
    setSuccessMessage('تم الدفع بنجاح! سيتم تفعيل اشتراكك قريباً.');
    setTimeout(() => {
      router.push('/dashboard/payment/success');
    }, 2000);
  };

  // معالجة فشل الدفع
  const handlePaymentFailure = (response: any) => {
    console.error('Payment failed:', response);
    setError(response.error || 'فشل في عملية الدفع. يرجى المحاولة مرة أخرى.');
  };

  // معالجة تقديم الدفع
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    
    // التحقق من وجود المستخدم
    if (!user) {
      setError('يجب تسجيل الدخول أولاً');
      return;
    }
    
    // التحقق من البيانات الأساسية
    if (!selectedPackage || !paymentMethod) {
      setError('يرجى اختيار الباقة وطريقة الدفع');
      return;
    }

    setSubmitting(true);
    try {
      const months = selectedPackage === '3months' ? 3 : selectedPackage === '6months' ? 6 : 12;
      const startDate = new Date();
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + months);
      setSubscriptionEnd(endDate.toLocaleDateString('ar-EG'));

      // جلب بيانات العميل من قاعدة البيانات
      type UserProfile = {
        name?: string;
        email?: string;
        phone?: string;
        address?: string;
        taxNumber?: string;
        currency?: string;
        currencySymbol?: string;
      };
      let userProfile: UserProfile = {};
      try {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          userProfile = userDoc.data() as UserProfile;
        }
      } catch (e) {
        console.warn('تعذر جلب بيانات العميل من قاعدة البيانات:', e);
      }

      // حفظ بيانات الدفع
      const conversion = currencyConversions[selectedPackage];
      const displayAmount = conversion?.convertedAmount || PACKAGES[selectedPackage]?.price || 0;
      
      await setDoc(doc(db, 'payments', `${user.uid}-${Date.now()}`), {
        transactionNumber: transactionNumber || '',
        packageType: selectedPackage || '',
        amount: displayAmount, // المبلغ المعروض للمستخدم بعملته
        paidAmount: Number(paidAmount),
        paymentMethod: paymentMethod || '',
        userId: user.uid,
        createdAt: startDate,
        subscriptionEnd: endDate,
        receiptInfo: receiptInfo || {},
        bankInfo: paymentMethod === 'bank' ? bankInfo : null,
        status: 'pending',
        currency: userCurrency.code, // عملة المستخدم
        currencySymbol: userCurrency.symbol,
        amountInEGP: PACKAGES[selectedPackage]?.price || 0 // للمرجعية الداخلية فقط
      });

      // تفعيل الاشتراك في users
      await setDoc(doc(db, 'users', user.uid), {
        subscription: {
          type: selectedPackage,
          start: startDate,
          end: endDate,
          status: 'active'
        }
      }, { merge: true });

      // حفظ بيانات الاشتراك في subscriptions
      await setDoc(doc(db, 'subscriptions', user.uid), {
        plan_name: PACKAGES[selectedPackage]?.title || '',
        start_date: startDate,
        end_date: endDate,
        status: 'pending',
        payment_method: paymentMethod || '',
        amount: displayAmount, // المبلغ بعملة المستخدم
        currency: userCurrency.code, // عملة المستخدم
        currencySymbol: userCurrency.symbol,
        paidAmount: Number(paidAmount),
        receiptInfo: receiptInfo || {},
        bankInfo: paymentMethod === 'bank' ? bankInfo : null,
        autoRenew: false,
        transaction_id: transactionNumber || '',
        invoice_number: `INV-${user.uid.slice(0,6)}-${Date.now()}`,
        customer_name: userProfile.name || user.displayName || receiptInfo.senderName || '',
        customer_email: userProfile.email || user.email || '',
        customer_phone: userProfile.phone || (user as any).phoneNumber || '',
        billing_address: userProfile.address || '',
        tax_number: userProfile.taxNumber || '',
        payment_date: receiptInfo.transferDate || startDate.toISOString(),
        amountInEGP: PACKAGES[selectedPackage]?.price || 0 // للمرجعية الداخلية فقط
      });

      setShowSuccessPopup(true);
      setSuccess(true);
      setTimeout(() => {
        setShowSuccessPopup(false);
        router.push('/dashboard');
      }, 6000);
    } catch (error) {
      console.error('تفاصيل الخطأ أثناء حفظ بيانات الدفع أو الاشتراك:', error);
      setError('حدث خطأ أثناء معالجة الدفع. يرجى التأكد من اتصالك بالإنترنت وصلاحيات الحساب. إذا استمرت المشكلة راجع الإدارة.');
    } finally {
      setSubmitting(false);
    }
  };

  // عرض حالة التحميل
  if (loading) {
    return <div className="flex justify-center items-center min-h-screen">جاري التحميل...</div>;
  }

  // منطق طرق الدفع حسب الدولة
  let paymentMethods: { id: string, name: string, icon: string }[] = [];
  
  // Geidea متاح لجميع الدول
  paymentMethods.push({ id: 'geidea', name: 'بطاقة ائتمان/مدى', icon: '💳' });
  
  // Apple Pay متاح للدول العربية الرئيسية
  if (['AE', 'SA', 'EG', 'QA'].includes(userCountry)) {
    paymentMethods.push({ id: 'apple-pay', name: 'أبل باي', icon: '🍎' });
  }
  
  if (GULF_COUNTRIES.includes(userCountry)) {
    paymentMethods.push(
      { id: 'google', name: 'جوجل باي', icon: '🟢' },
      { id: 'wallet', name: 'تحويل على محفظة (97472053188)', icon: '👛' },
      { id: 'fawry', name: 'فوري', icon: '💸' }
    );
  } else if (userCountry === 'EG') {
    paymentMethods.push(
      { id: 'bank', name: 'تحويل بنكي', icon: '🏦' },
      { id: 'fawry', name: 'فوري', icon: '💸' },
      { id: 'wallet', name: 'تحويل على محفظة', icon: '👛' }
    );
  } else {
    // للدول الأخرى، أضف خيارات إضافية
    paymentMethods.push(
      { id: 'wallet', name: 'تحويل على محفظة', icon: '👛' },
      { id: 'bank', name: 'تحويل بنكي', icon: '🏦' }
    );
  }

  return (
    <DashboardLayout>
      {/* بوب أب التنبيه العصري */}
      <GeideaConfigAlertModal visible={showCountryAlert} onClose={() => setShowCountryAlert(false)} />
      <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white" dir="rtl">
        <div className="container px-4 py-8 mx-auto max-w-7xl">
          {/* عنوان الصفحة */}
          <div className="mb-8 text-center">
            <h1 className="mb-2 text-3xl font-bold text-gray-900">اشترك الآن</h1>
            <p className="text-gray-600">اختر الباقة المناسبة لك وابدأ رحلة النجاح</p>
          </div>

          {/* عرض الباقات */}
          <div className="grid gap-8 mb-12 md:grid-cols-3">
            {Object.entries(PACKAGES).map(([key, pkg]) => (
              <div
                key={key}
                className={`relative p-6 transition-all duration-300 transform border-2 rounded-2xl hover:scale-105 ${
                  selectedPackage === key
                    ? 'border-blue-500 shadow-xl bg-blue-50'
                    : 'border-gray-200 bg-white hover:border-blue-300'
                }`}
                onClick={() => setSelectedPackage(key)}
              >
                {/* شارة الأكثر شعبية */}
                {pkg.popular && (
                  <div className="absolute -top-3 right-6 px-3 py-1 text-sm font-medium text-white bg-yellow-500 rounded-full transform -translate-y-1/2">
                    الأكثر شعبية
                  </div>
                )}

                {/* أيقونة الباقة */}
                <div className="mb-4 text-4xl text-center">{pkg.icon}</div>

                {/* عنوان الباقة */}
                <h3 className="mb-2 text-xl font-bold text-center text-gray-900">{pkg.title}</h3>

                {/* السعر */}
                <div className="flex flex-col gap-2 justify-center items-center mb-4">
                  <div className="flex gap-2 items-center">
                    {/* الأسعار ثابتة لكل الدول، نغير رمز العملة فقط */}
                    <span className="text-2xl font-bold text-blue-600">{pkg.price} {userCurrency.symbol}</span>
                    <span className="text-sm text-gray-500 line-through">{pkg.originalPrice} {userCurrency.symbol}</span>
                    <span className="px-2 py-1 text-xs font-medium text-white bg-green-500 rounded-full">
                      {pkg.discount} خصم
                    </span>
                  </div>
                </div>

                {/* المدة */}
                <div className="mb-4 text-center">
                  <span className="px-3 py-1 text-sm font-medium text-blue-600 bg-blue-100 rounded-full">
                    {pkg.period}
                  </span>
                </div>

                {/* المميزات */}
                <ul className="space-y-3">
                  {pkg.features.map((feature, index) => (
                    <li key={index} className="flex gap-2 items-start text-sm text-gray-700">
                      <span className="text-green-500">✓</span>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

          {/* طرق الدفع */}
          {paymentMethods.length === 0 ? (
            <div className="p-4 mb-6 text-yellow-800 bg-yellow-100 rounded-xl border-2 border-yellow-300">
              <span>طرق الدفع غير متاحة حالياً لدولتك.</span>
            </div>
          ) : (
            <div className="p-6 mb-8 bg-white rounded-2xl shadow-lg">
              <h3 className="mb-4 text-xl font-bold text-gray-900">اختر طريقة الدفع</h3>
              <div className="grid gap-4 md:grid-cols-4">
                {paymentMethods.map(method => (
                  <label
                    key={method.id}
                    className={`flex flex-col items-center p-4 transition-all duration-200 border-2 rounded-xl cursor-pointer hover:border-blue-300 ${
                      paymentMethod === method.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                    }`}
                  >
                    <input
                      type="radio"
                      name="paymentMethod"
                      value={method.id}
                      checked={paymentMethod === method.id}
                      onChange={() => setPaymentMethod(method.id)}
                      className="hidden"
                    />
                    <span className="mb-2 text-2xl">{method.icon}</span>
                    <span className="text-sm font-medium text-gray-700">{method.name}</span>
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* تعليمات خاصة عند اختيار تحويل على محفظة */}
          {paymentMethod === 'wallet' && (
            <div className="p-6 mb-8 text-center bg-yellow-50 rounded-2xl border-2 border-yellow-200">
              <h4 className="mb-3 text-lg font-bold text-yellow-800">تعليمات التحويل</h4>
              <p className="mb-2 text-yellow-700">
                {userCountry === 'EG'
                  ? <>يرجى التحويل على محفظة <b>فودافون كاش</b> أو <b>انستا باي</b> على الرقم:</>
                  : <>يرجى التحويل على محفظة محلية (مثل <b>STC Pay</b> أو <b>فودافون قطر</b>) على الرقم:</>
                }
              </p>
              <div className="p-3 mb-3 text-xl font-bold text-yellow-900 bg-yellow-100 rounded-lg select-all">
                {userCountry === 'EG' ? '01017799580' : '97472053188'}
              </div>
              <p className="text-sm text-yellow-600">
                يرجى رفع صورة إيصال التحويل بعد الدفع
              </p>
            </div>
          )}

          {/* عند اختيار Geidea، أظهر زر الدفع */}
          {paymentMethod === 'geidea' && (
            <div className="flex flex-col gap-4 items-center my-6">
              <button
                type="button"
                onClick={handleGeideaPayment}
                disabled={submitting}
                className={`w-full p-4 text-white font-bold rounded-xl transition-all duration-200 shadow-lg text-lg ${
                  submitting
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-700 hover:bg-blue-800'
                }`}
              >
                {submitting ? (
                  <div className="flex gap-2 justify-center items-center">
                    <div className="w-5 h-5 rounded-full border-2 border-white animate-spin border-t-transparent"></div>
                    جاري إنشاء جلسة الدفع...
                  </div>
                ) : (
                  'الدفع عبر البطاقة الإلكترونية'
                )}
              </button>
              <div className="space-y-2 text-sm text-gray-600">
                <p>سيتم تحويلك لبوابة الدفع الآمنة لإتمام العملية عبر بطاقة ائتمان أو مدى أو أي طريقة دفع إلكترونية متاحة في بلدك.</p>
              </div>
              <div className="flex gap-2 items-center text-xs text-gray-500">
                <span>🔒</span>
                <span>مدفوعات آمنة ومشفرة</span>
                <span>•</span>
                <span>💳</span>
                <span>بطاقات ائتمان ومدى</span>
                <span>•</span>
                <span>🌍</span>
                <span>متاح في جميع الدول</span>
              </div>
            </div>
          )}

          {/* عند اختيار Apple Pay، أظهر زر Apple Pay */}
          {paymentMethod === 'apple-pay' && (
            <div className="flex flex-col gap-4 items-center my-6">
              <ApplePayButton
                amount={(() => {
                  // تحويل المبلغ من العملة المحلية إلى الجنيه المصري للدفع
                  const localAmount = PACKAGES[selectedPackage]?.price || 0;
                  if (userCurrency.code !== 'EGP') {
                    const conversionResult = convertToEGPSync(localAmount, userCurrency.code);
                    return Math.round(conversionResult.convertedAmount);
                  }
                  return localAmount;
                })()}
                currency="EGP" // العملة دائماً جنيه مصري لجيديا
                orderId={`PAY${Date.now()}`}
                customerEmail={user?.email || ''}
                customerName={user?.displayName || 'مستخدم'}
                onPaymentSuccess={onPaymentSuccess}
                onPaymentError={onPaymentError}
                disabled={submitting}
              />
              <div className="space-y-2 text-sm text-gray-600">
                <p>ادفع بسهولة وأمان باستخدام Apple Pay. سيتم خصم المبلغ من طريقة الدفع المحفوظة في جهازك.</p>
                <div className="p-2 bg-blue-50 rounded-lg border border-blue-200">
                  <p className="text-xs text-blue-800">
                    🍎 <strong>Apple Pay متاح في:</strong> الإمارات، السعودية، مصر، وقطر
                  </p>
                </div>
              </div>
              <div className="flex gap-2 items-center text-xs text-gray-500">
                <span>🔒</span>
                <span>آمن ومشفر</span>
                <span>•</span>
                <span>🍎</span>
                <span>Apple Pay</span>
                <span>•</span>
                <span>⚡</span>
                <span>دفع فوري</span>
              </div>
            </div>
          )}

          {/* رسائل الخطأ والنجاح */}
          {error && (
            <div className="p-4 mb-6 text-red-700 bg-red-100 rounded-xl border-2 border-red-200">
              <div className="flex gap-2 items-center">
                <span className="text-xl">⚠️</span>
                <p>{error}</p>
              </div>
            </div>
          )}

          {success && (
            <div className="p-4 mb-6 text-green-700 bg-green-100 rounded-xl border-2 border-green-200">
              <div className="flex gap-2 items-center">
                <span className="text-xl">✅</span>
                <p>تم استلام طلب الدفع بنجاح! جاري تحويلك...</p>
              </div>
            </div>
          )}

          {/* نموذج الدفع */}
          <form onSubmit={handleSubmit} className="p-6 bg-white rounded-2xl shadow-lg">
            <div className="grid gap-6 md:grid-cols-2">
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">رقم العملية البنكية</label>
                <input
                  type="text"
                  value={transactionNumber}
                  onChange={e => setTransactionNumber(e.target.value)}
                  className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  placeholder="أدخل رقم العملية البنكية"
                  required
                />
              </div>
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">قيمة المبلغ المحول (جنيه)</label>
                <input
                  type="number"
                  min="1"
                  value={paidAmount}
                  readOnly
                  className="p-3 w-full text-gray-700 bg-gray-100 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  placeholder="مثال: 120"
                  required
                />
              </div>
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">اسم المحول</label>
                <input
                  type="text"
                  value={receiptInfo.senderName}
                  onChange={e => setReceiptInfo(prev => ({ ...prev, senderName: e.target.value }))}
                  className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  placeholder="اسم صاحب التحويل"
                  required
                />
              </div>
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">تاريخ التحويل</label>
                <input
                  type="date"
                  value={receiptInfo.transferDate}
                  onChange={e => setReceiptInfo(prev => ({ ...prev, transferDate: e.target.value }))}
                  className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  required
                />
              </div>
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">ملاحظات إضافية</label>
                <input
                  type="text"
                  value={receiptInfo.notes}
                  onChange={e => setReceiptInfo(prev => ({ ...prev, notes: e.target.value }))}
                  className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  placeholder="أي ملاحظات (اختياري)"
                />
              </div>
              {paymentMethod === 'bank' && (
                <>
                  <div>
                    <label className="block mb-2 text-sm font-medium text-gray-700">اسم صاحب الحساب البنكي</label>
                    <input
                      type="text"
                      value={bankInfo.accountName}
                      onChange={e => setBankInfo(prev => ({ ...prev, accountName: e.target.value }))}
                      className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-sm font-medium text-gray-700">رقم الحساب البنكي</label>
                    <input
                      type="text"
                      value={bankInfo.accountNumber}
                      onChange={e => setBankInfo(prev => ({ ...prev, accountNumber: e.target.value }))}
                      className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-sm font-medium text-gray-700">اسم البنك</label>
                    <input
                      type="text"
                      value={bankInfo.bankName}
                      onChange={e => setBankInfo(prev => ({ ...prev, bankName: e.target.value }))}
                      className="p-3 w-full text-gray-700 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                      required
                    />
                  </div>
                </>
              )}
            </div>
            <div className="mt-6">
              <button
                type="submit"
                disabled={submitting}
                className={`w-full p-4 text-white font-medium rounded-xl transition-all duration-200 ${
                  submitting
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-600 hover:bg-blue-700 hover:shadow-lg'
                }`}
              >
                {submitting ? (
                  <div className="flex gap-2 justify-center items-center">
                    <div className="w-5 h-5 rounded-full border-2 border-white animate-spin border-t-transparent"></div>
                    جاري الإرسال...
                  </div>
                ) : (
                  'إرسال طلب الدفع'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
      {showSuccessPopup && (
        <div className="flex fixed inset-0 z-50 justify-center items-center bg-black bg-opacity-70">
          <div className="p-8 text-center bg-white rounded-3xl shadow-2xl animate-bounceIn">
            <div className="mb-4 text-5xl">🎉</div>
            <h2 className="mb-2 text-2xl font-bold text-green-700">تم إرسال بيانات الدفع بنجاح!</h2>
            <p className="mb-2 text-lg text-gray-700">تم استلام طلبك وسيتم مراجعته من الإدارة خلال 24 ساعة.</p>
            <p className="mb-2 font-semibold text-blue-600 text-md">سيتواصل معك فريقنا لتفعيل الاشتراك بعد مراجعة المستندات.</p>
            <p className="mb-2 text-gray-600 text-md">صلاحية الاشتراك حتى <span className="font-bold text-green-600">{subscriptionEnd}</span></p>
            <div className="mt-4 text-3xl animate-bounce">🚀</div>
          </div>
        </div>
      )}

      {/* مودال الدفع عبر Geidea */}
      <GeideaPaymentModal
        visible={showGeideaModal}
        onRequestClose={() => setShowGeideaModal(false)}
        onPaymentSuccess={handlePaymentSuccess}
        onPaymentFailure={handlePaymentFailure}
        amount={PACKAGES[selectedPackage]?.price || 0} // المبلغ الفعلي بالجنيه المصري (خفي)
        currency="EGP" // العملة دائماً جنيه مصري لجيديا
        title="الدفع عبر البطاقة الإلكترونية"
        description={`دفع ${PACKAGES[selectedPackage]?.title || 'الباقة'} بقيمة ${PACKAGES[selectedPackage]?.price || 0} ${userCurrency.symbol}`}
        customerEmail={user?.email || ''}
        merchantReferenceId={`PAY${Date.now()}`}
      />
    </DashboardLayout>
  );
}
