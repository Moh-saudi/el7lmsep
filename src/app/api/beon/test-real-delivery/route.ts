import { NextRequest, NextResponse } from 'next/server';
import { BEON_V3_CONFIG, createBeOnHeaders } from '@/lib/beon/config';

export async function POST(request: NextRequest) {
  try {
    const { phone, message } = await request.json();

    if (!phone || !message) {
      return NextResponse.json(
        { success: false, error: 'ุฑูู ุงููุงุชู ูุงูุฑุณุงูุฉ ูุทููุจุงู' },
        { status: 400 }
      );
    }

    console.log('๐ฑ ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุญูููู:', { phone, messageLength: message.length });

    // ุงุฎุชุจุงุฑ ุชูุณููุงุช ูุฎุชููุฉ ููุทูุจ
    const requestFormats = [
      // ุงูุชูุณูู ุงูุญุงูู
      {
        name: 'ุงูุชูุณูู ุงูุญุงูู',
        body: {
          phoneNumbers: [phone],
          message: message,
          sender: BEON_V3_CONFIG.DEFAULTS.SENDER_NAME,
          lang: BEON_V3_CONFIG.DEFAULTS.LANGUAGE
        }
      },
      // ุชูุณูู ุจุฏูู sender
      {
        name: 'ุจุฏูู sender',
        body: {
          phoneNumbers: [phone],
          message: message,
          lang: BEON_V3_CONFIG.DEFAULTS.LANGUAGE
        }
      },
      // ุชูุณูู ุจุฏูู lang
      {
        name: 'ุจุฏูู lang',
        body: {
          phoneNumbers: [phone],
          message: message,
          sender: BEON_V3_CONFIG.DEFAULTS.SENDER_NAME
        }
      },
      // ุชูุณูู ูุจุณุท
      {
        name: 'ุชูุณูู ูุจุณุท',
        body: {
          phoneNumbers: [phone],
          message: message
        }
      },
      // ุชูุณูู ูุน phoneNumber ุจุฏูุงู ูู phoneNumbers
      {
        name: 'phoneNumber ุจุฏูุงู ูู phoneNumbers',
        body: {
          phoneNumber: phone,
          message: message,
          sender: BEON_V3_CONFIG.DEFAULTS.SENDER_NAME,
          lang: BEON_V3_CONFIG.DEFAULTS.LANGUAGE
        }
      },
      // ุชูุณูู ูุน text ุจุฏูุงู ูู message
      {
        name: 'text ุจุฏูุงู ูู message',
        body: {
          phoneNumbers: [phone],
          text: message,
          sender: BEON_V3_CONFIG.DEFAULTS.SENDER_NAME,
          lang: BEON_V3_CONFIG.DEFAULTS.LANGUAGE
        }
      }
    ];

    const results = [];

    for (const format of requestFormats) {
      try {
        console.log(`๐ฑ ุงุฎุชุจุงุฑ ุชูุณูู: ${format.name}`);
        
        const response = await fetch(`${BEON_V3_CONFIG.BASE_URL}${BEON_V3_CONFIG.ENDPOINTS.SMS_BULK}`, {
          method: 'POST',
          headers: createBeOnHeaders(BEON_V3_CONFIG.TOKEN),
          body: JSON.stringify(format.body)
        });

        const responseData = await response.text();
        
        results.push({
          format: format.name,
          requestBody: format.body,
          status: response.status,
          success: response.ok,
          response: responseData,
          timestamp: new Date().toISOString()
        });

        console.log(`๐ฑ ูุชูุฌุฉ ${format.name}:`, {
          status: response.status,
          success: response.ok,
          response: responseData
        });

      } catch (error) {
        results.push({
          format: format.name,
          requestBody: format.body,
          error: error.message,
          success: false
        });
      }
    }

    // ุชุญููู ุงููุชุงุฆุฌ
    const successfulFormats = results.filter(r => r.success);
    const differentResponses = results.filter(r => r.success && r.response !== '{"status":200,"message":"massage send"}');

    return NextResponse.json({
      success: true,
      message: 'ุชู ุงุฎุชุจุงุฑ ุชูุณููุงุช ูุฎุชููุฉ ููุทูุจ',
      data: {
        results,
        analysis: {
          totalFormats: results.length,
          successfulFormats: successfulFormats.length,
          differentResponses: differentResponses.length,
          allResponsesSame: differentResponses.length === 0
        },
        recommendations: [
          successfulFormats.length > 0 ? 'ุงูุชูุณูู ุงูุญุงูู ูุนูู' : 'ุชุญูู ูู ุชูุณูู ุงูุทูุจ',
          differentResponses.length > 0 ? 'ูุฌุฏูุง ุงุณุชุฌุงุจุงุช ูุฎุชููุฉ' : 'ุฌููุน ุงูุงุณุชุฌุงุจุงุช ูุชุดุงุจูุฉ',
          'ุชุญูู ูู ุฑุตูุฏ ุงูุญุณุงุจ',
          'ุชูุงุตู ูุน ุฏุนู BeOn ููุนุฑูุฉ ุณุจุจ ุนุฏู ูุตูู ุงูุฑุณุงุฆู'
        ],
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุฅุฑุณุงู ุงูุญูููู:', error);
    return NextResponse.json(
      { success: false, error: 'ุญุฏุซ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุฅุฑุณุงู ุงูุญูููู' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'BeOn V3 Real Delivery Test',
    description: 'ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุญูููู ุจุชูุณููุงุช ูุฎุชููุฉ',
    endpoints: {
      POST: 'ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุญูููู',
      parameters: {
        phone: 'ุฑูู ุงููุงุชู',
        message: 'ูุต ุงูุฑุณุงูุฉ'
      }
    }
  });
}


