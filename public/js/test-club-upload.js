// ุงุฎุชุจุงุฑ ุฑูุน ุตูุฑ ุงููุงุฏู ูุชุดุฎูุต ูุดุงูู Supabase
console.log('๐ข ุชุญููู ุฃุฏูุงุช ุชุดุฎูุต ุฑูุน ุตูุฑ ุงููุงุฏู...');

// ุฏุงูุฉ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Supabase
async function testSupabaseConnection() {
    console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Supabase...');
    
    try {
        if (typeof supabase === 'undefined') {
            throw new Error('Supabase ุบูุฑ ูุชุงุญ');
        }

        // ุงุฎุชุจุงุฑ ุงููุตูู ููุจููุช
        const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
        
        if (bucketsError) {
            console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุจููุชุงุช:', bucketsError);
            return false;
        }

        console.log('โ ุงูุจููุชุงุช ุงููุชุงุญุฉ:', buckets);
        
        // ุงูุชุญูู ูู ูุฌูุฏ ุจููุช clubavatar
        const clubavatarBucket = buckets.find(bucket => bucket.name === 'clubavatar');
        if (!clubavatarBucket) {
            console.error('โ ุจููุช clubavatar ุบูุฑ ููุฌูุฏ');
            return false;
        }

        console.log('โ ุจููุช clubavatar ููุฌูุฏ:', clubavatarBucket);
        return true;

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู Supabase:', error);
        return false;
    }
}

// ุฏุงูุฉ ุงุฎุชุจุงุฑ ุงูุณูุงุณุงุช
async function testBucketPolicies() {
    console.log('๐ ุงุฎุชุจุงุฑ ุณูุงุณุงุช ุงูุจููุช...');
    
    try {
        // ูุญุงููุฉ ูุฑุงุกุฉ ููู ููุฌูุฏ
        const { data: files, error: listError } = await supabase.storage
            .from('clubavatar')
            .list('', { limit: 1 });

        if (listError) {
            console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงููููุงุช:', listError);
            return false;
        }

        console.log('โ ูููู ูุฑุงุกุฉ ุงููููุงุช:', files);

        // ุงุฎุชุจุงุฑ ุฑูุน ููู ุชุฌุฑูุจู
        const testFile = new Blob(['test'], { type: 'text/plain' });
        const testFileName = `test_${Date.now()}.txt`;
        
        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('clubavatar')
            .upload(`test/${testFileName}`, testFile);

        if (uploadError) {
            console.error('โ ุฎุทุฃ ูู ุฑูุน ุงูููู:', uploadError);
            return false;
        }

        console.log('โ ุชู ุฑูุน ุงูููู ุงูุชุฌุฑูุจู:', uploadData);

        // ุญุฐู ุงูููู ุงูุชุฌุฑูุจู
        await supabase.storage
            .from('clubavatar')
            .remove([`test/${testFileName}`]);

        console.log('โ ุชู ุญุฐู ุงูููู ุงูุชุฌุฑูุจู');
        return true;

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุณูุงุณุงุช:', error);
        return false;
    }
}

// ุฏุงูุฉ ุงุฎุชุจุงุฑ ุฑูุน ุตูุฑุฉ
async function testImageUpload() {
    console.log('๐ผ๏ธ ุงุฎุชุจุงุฑ ุฑูุน ุตูุฑุฉ...');
    
    try {
        // ุฅูุดุงุก ุตูุฑุฉ ุชุฌุฑูุจูุฉ (1x1 pixel)
        const canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#FF0000';
        ctx.fillRect(0, 0, 1, 1);
        
        // ุชุญููู ุฅูู blob
        const testImageBlob = await new Promise(resolve => {
            canvas.toBlob(resolve, 'image/png');
        });

        const testFileName = `test_image_${Date.now()}.png`;
        const testPath = `test/${testFileName}`;

        // ุฑูุน ุงูุตูุฑุฉ
        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('clubavatar')
            .upload(testPath, testImageBlob, {
                cacheControl: '3600',
                upsert: true
            });

        if (uploadError) {
            console.error('โ ุฎุทุฃ ูู ุฑูุน ุงูุตูุฑุฉ:', uploadError);
            return false;
        }

        console.log('โ ุชู ุฑูุน ุงูุตูุฑุฉ:', uploadData);

        // ุงูุญุตูู ุนูู ุงูุฑุงุจุท ุงูุนุงู
        const { data: { publicUrl } } = supabase.storage
            .from('clubavatar')
            .getPublicUrl(testPath);

        console.log('โ ุงูุฑุงุจุท ุงูุนุงู:', publicUrl);

        // ุญุฐู ุงูุตูุฑุฉ ุงูุชุฌุฑูุจูุฉ
        await supabase.storage
            .from('clubavatar')
            .remove([testPath]);

        console.log('โ ุชู ุญุฐู ุงูุตูุฑุฉ ุงูุชุฌุฑูุจูุฉ');
        return true;

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุฑูุน ุงูุตูุฑุฉ:', error);
        return false;
    }
}

// ุฏุงูุฉ ุงุฎุชุจุงุฑ ูุณุงุฑ ุฑูุน ุงููุงุฏู ุงููุงูู
async function testClubUploadFlow() {
    console.log('๐๏ธ ุงุฎุชุจุงุฑ ูุณุงุฑ ุฑูุน ุงููุงุฏู ุงููุงูู...');
    
    try {
        // ุงูุญุตูู ุนูู ูุนุฑู ุงููุณุชุฎุฏู
        const user = firebase.auth().currentUser;
        if (!user) {
            throw new Error('ุงููุณุชุฎุฏู ุบูุฑ ูุณุฌู ุฏุฎูู');
        }

        console.log('๐ค ูุนุฑู ุงููุณุชุฎุฏู:', user.uid);

        // ุฅูุดุงุก ุตูุฑุฉ ุชุฌุฑูุจูุฉ ูููุฌู
        const canvas = document.createElement('canvas');
        canvas.width = 100;
        canvas.height = 100;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#0066CC';
        ctx.fillRect(0, 0, 100, 100);
        ctx.fillStyle = '#FFFFFF';
        ctx.font = '20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('LOGO', 50, 55);
        
        const logoBlob = await new Promise(resolve => {
            canvas.toBlob(resolve, 'image/png');
        });

        const timestamp = Date.now();
        const fileName = `${timestamp}.png`;
        const filePath = `${user.uid}/logo/${fileName}`;

        console.log('๐ ูุณุงุฑ ุงูููู:', filePath);

        // ุฑูุน ุงูููุฌู
        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('clubavatar')
            .upload(filePath, logoBlob, {
                cacheControl: '3600',
                upsert: true
            });

        if (uploadError) {
            console.error('โ ุฎุทุฃ ูู ุฑูุน ุงูููุฌู:', uploadError);
            return false;
        }

        console.log('โ ุชู ุฑูุน ุงูููุฌู:', uploadData);

        // ุงูุญุตูู ุนูู ุงูุฑุงุจุท ุงูุนุงู
        const { data: { publicUrl } } = supabase.storage
            .from('clubavatar')
            .getPublicUrl(filePath);

        console.log('โ ุฑุงุจุท ุงูููุฌู:', publicUrl);

        // ุชุญุฏูุซ ุจูุงูุงุช ุงููุงุฏู ูู Firebase
        const clubRef = firebase.firestore().collection('clubs').doc(user.uid);
        await clubRef.update({
            logo: filePath // ุญูุธ ุงููุณุงุฑ ูููุณ ุงูุฑุงุจุท ุงููุงูู
        });

        console.log('โ ุชู ุชุญุฏูุซ ุจูุงูุงุช ุงููุงุฏู ูู Firebase');

        // ุญุฐู ุงูููู ุงูุชุฌุฑูุจู
        await supabase.storage
            .from('clubavatar')
            .remove([filePath]);

        console.log('โ ุชู ุญุฐู ุงูููู ุงูุชุฌุฑูุจู');
        return true;

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุณุงุฑ ุงููุงุฏู:', error);
        return false;
    }
}

// ุฏุงูุฉ ุงูุชุดุฎูุต ุงูุดุงูู
async function fullClubUploadDiagnosis() {
    console.log('๐ ุจุฏุก ุงูุชุดุฎูุต ุงูุดุงูู ูุฑูุน ุตูุฑ ุงููุงุฏู...\n');

    const results = [];

    // 1. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Supabase
    console.log('1๏ธโฃ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Supabase...');
    const supabaseConnected = await testSupabaseConnection();
    results.push(`Supabase: ${supabaseConnected ? 'โ' : 'โ'}`);

    if (!supabaseConnected) {
        console.log('\nโ ูุดู ุงูุงุชุตุงู ุจู Supabase - ุชููู ุงูุชุดุฎูุต');
        return results;
    }

    // 2. ุงุฎุชุจุงุฑ ุงูุณูุงุณุงุช
    console.log('\n2๏ธโฃ ุงุฎุชุจุงุฑ ุณูุงุณุงุช ุงูุจููุช...');
    const policiesOk = await testBucketPolicies();
    results.push(`ุงูุณูุงุณุงุช: ${policiesOk ? 'โ' : 'โ'}`);

    // 3. ุงุฎุชุจุงุฑ ุฑูุน ุงูุตูุฑ
    console.log('\n3๏ธโฃ ุงุฎุชุจุงุฑ ุฑูุน ุงูุตูุฑ...');
    const imageUploadOk = await testImageUpload();
    results.push(`ุฑูุน ุงูุตูุฑ: ${imageUploadOk ? 'โ' : 'โ'}`);

    // 4. ุงุฎุชุจุงุฑ ูุณุงุฑ ุงููุงุฏู ุงููุงูู
    console.log('\n4๏ธโฃ ุงุฎุชุจุงุฑ ูุณุงุฑ ุงููุงุฏู ุงููุงูู...');
    const clubFlowOk = await testClubUploadFlow();
    results.push(`ูุณุงุฑ ุงููุงุฏู: ${clubFlowOk ? 'โ' : 'โ'}`);

    // ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
    console.log('\n๐ ููุฎุต ุงููุชุงุฆุฌ:');
    console.log('===================');
    results.forEach(result => console.log(result));
    
    const allOk = results.every(result => result.includes('โ'));
    console.log(`\n๐ฏ ุงูุชูููู ุงูููุงุฆู: ${allOk ? 'โ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช' : 'โ ุชูุฌุฏ ูุดุงูู'}`);
    
    if (!allOk) {
        console.log('\n๐ก ุงูุญููู ุงูููุชุฑุญุฉ:');
        if (!supabaseConnected) {
            console.log('- ุชุญูู ูู ุฅุนุฏุงุฏุงุช Supabase');
        }
        if (!policiesOk) {
            console.log('- ุฃุถู ุณูุงุณุงุช ุงูุฃูุงู ููุจููุช');
            console.log('- ุชุฃูุฏ ูู ุฃู ุงูุจููุช public');
        }
        if (!imageUploadOk) {
            console.log('- ุชุญูู ูู ุฃุฐููุงุช ุงูุฑูุน');
        }
        if (!clubFlowOk) {
            console.log('- ุชุญูู ูู ุฅุนุฏุงุฏุงุช Firebase');
        }
    }

    return results;
}

// ุฏุงูุฉ ูุฅูุดุงุก ุณูุงุณุงุช Supabase ุงูุตุญูุญุฉ
function generateSupabasePolicies() {
    console.log('๐ ุณูุงุณุงุช Supabase ุงููุทููุจุฉ ูุจููุช clubavatar:');
    console.log('=====================================');
    
    const policies = [
        {
            name: 'Enable read access for all users',
            operation: 'SELECT',
            sql: `
-- ุงูุณูุงุณุฉ: ุงูุณูุงุญ ุจูุฑุงุกุฉ ุงููููุงุช ููุฌููุน
CREATE POLICY "Enable read access for all users" ON storage.objects FOR SELECT USING (bucket_id = 'clubavatar');
            `
        },
        {
            name: 'Enable insert for authenticated users only',
            operation: 'INSERT', 
            sql: `
-- ุงูุณูุงุณุฉ: ุงูุณูุงุญ ุจุฑูุน ุงููููุงุช ูููุณุชุฎุฏููู ุงููุตุงุฏููู ููุท
CREATE POLICY "Enable insert for authenticated users only" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'clubavatar' AND auth.role() = 'authenticated');
            `
        },
        {
            name: 'Enable update for users based on user_id',
            operation: 'UPDATE',
            sql: `
-- ุงูุณูุงุณุฉ: ุงูุณูุงุญ ุจุชุญุฏูุซ ุงููููุงุช ูุตุงุญุจ ุงูููู ููุท
CREATE POLICY "Enable update for users based on user_id" ON storage.objects FOR UPDATE USING (bucket_id = 'clubavatar' AND auth.uid()::text = (storage.foldername(name))[1]);
            `
        },
        {
            name: 'Enable delete for users based on user_id',
            operation: 'DELETE',
            sql: `
-- ุงูุณูุงุณุฉ: ุงูุณูุงุญ ุจุญุฐู ุงููููุงุช ูุตุงุญุจ ุงูููู ููุท  
CREATE POLICY "Enable delete for users based on user_id" ON storage.objects FOR DELETE USING (bucket_id = 'clubavatar' AND auth.uid()::text = (storage.foldername(name))[1]);
            `
        }
    ];

    policies.forEach((policy, index) => {
        console.log(`\n${index + 1}. ${policy.name} (${policy.operation}):`);
        console.log(policy.sql);
    });

    console.log('\n๐ ุฎุทูุงุช ุงูุชุทุจูู:');
    console.log('1. ุงุฐูุจ ุฅูู Supabase Dashboard');
    console.log('2. ุงุฎุชุฑ Storage > Policies');
    console.log('3. ุงุญุฐู ุงูุณูุงุณุงุช ุงูุญุงููุฉ ุงูุฎุงุทุฆุฉ');
    console.log('4. ุฃุถู ุงูุณูุงุณุงุช ุงูุฌุฏูุฏุฉ ูุงุญุฏุฉ ุชูู ุงูุฃุฎุฑู');
    console.log('5. ุชุฃูุฏ ูู ุฃู ุงูุจููุช "public"');
}

// ุชุณุฌูู ุงูุฏูุงู ูู ุงููุทุงู ุงูุนุงู
window.testSupabaseConnection = testSupabaseConnection;
window.testBucketPolicies = testBucketPolicies;
window.testImageUpload = testImageUpload;
window.testClubUploadFlow = testClubUploadFlow;
window.fullClubUploadDiagnosis = fullClubUploadDiagnosis;
window.generateSupabasePolicies = generateSupabasePolicies;

console.log('โ ุชู ุชุญููู ุฃุฏูุงุช ุชุดุฎูุต ุฑูุน ุตูุฑ ุงููุงุฏู');
console.log('๐ ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:');
console.log('  - testSupabaseConnection() - ุงุฎุชุจุงุฑ ุงูุงุชุตุงู');
console.log('  - testBucketPolicies() - ุงุฎุชุจุงุฑ ุงูุณูุงุณุงุช');
console.log('  - testImageUpload() - ุงุฎุชุจุงุฑ ุฑูุน ุงูุตูุฑ');
console.log('  - testClubUploadFlow() - ุงุฎุชุจุงุฑ ูุณุงุฑ ุงููุงุฏู');
console.log('  - fullClubUploadDiagnosis() - ุชุดุฎูุต ุดุงูู');
console.log('  - generateSupabasePolicies() - ุนุฑุถ ุงูุณูุงุณุงุช ุงููุทููุจุฉ');

// ุชุดุบูู ุงูุชุดุฎูุต ุชููุงุฆูุงู
console.log('\n๐ ุจุฏุก ุงูุชุดุฎูุต ุงูุชููุงุฆู...');
// fullClubUploadDiagnosis(); 
