rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ملفات اللاعبين: قواعد محسنة تحل مشكلة الحلقة المفرغة
    match /players/{playerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == playerId ||
        request.auth.uid == resource.data.trainer_id ||
        request.auth.uid == resource.data.trainerId ||
        request.auth.uid == resource.data.club_id ||
        request.auth.uid == resource.data.clubId ||
        request.auth.uid == resource.data.agent_id ||
        request.auth.uid == resource.data.agentId ||
        request.auth.uid == resource.data.academy_id ||
        request.auth.uid == resource.data.academyId ||
        // قاعدة إصلاح محسنة: السماح للمنظمات بإضافة أنفسها
        request.auth.uid == request.resource.data.club_id ||
        request.auth.uid == request.resource.data.clubId ||
        request.auth.uid == request.resource.data.trainer_id ||
        request.auth.uid == request.resource.data.trainerId ||
        request.auth.uid == request.resource.data.agent_id ||
        request.auth.uid == request.resource.data.agentId ||
        request.auth.uid == request.resource.data.academy_id ||
        request.auth.uid == request.resource.data.academyId ||
        // قاعدة مؤقتة لإصلاح الصور: السماح للأندية المرتبطة بتحديث الصور
        (resource.data.club_id == request.auth.uid && 
         request.resource.data.keys().hasAny(['profile_image', 'profile_image_url', 'avatar_url', 'image_url']) &&
         request.resource.data.keys().size() <= 4) ||
        // صلاحيات الإداريين
        isAdmin() || isSuperAdmin()
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.trainer_id ||
        request.auth.uid == request.resource.data.trainerId ||
        request.auth.uid == request.resource.data.club_id ||
        request.auth.uid == request.resource.data.clubId ||
        request.auth.uid == request.resource.data.agent_id ||
        request.auth.uid == request.resource.data.agentId ||
        request.auth.uid == request.resource.data.academy_id ||
        request.auth.uid == request.resource.data.academyId ||
        // السماح للمنظمات بإنشاء لاعبين جدد باستخدام addedBy
        (request.resource.data.keys().hasAny(['addedBy']) && 
         request.auth.uid == request.resource.data.addedBy.accountId) ||
        // صلاحيات الإداريين
        isAdmin() || isSuperAdmin()
      );
    }
    
    // ملفات الأندية: الجميع يقرأ، النادي نفسه فقط يكتب
    match /clubProfiles/{clubId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == clubId || isAdmin() || isSuperAdmin());
    }
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == clubId || isAdmin() || isSuperAdmin());
    }

    // بيانات اللاعبين داخل الأندية
    match /clubs/{clubId}/players/{playerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == clubId || isAdmin() || isSuperAdmin());
    }

    // الإشعارات: الجميع يقرأ ويكتب (أي مستخدم مسجل)
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null;
    }

    // اشتراكات وفواتير كل مستخدم (لاعب، نادي، وكيل، ...): فقط صاحب الحساب يقرأ ويكتب
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin() || isSuperAdmin());
    }
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin() || isSuperAdmin());
    }
    match /users/{userId}/invoices/{invoiceId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin() || isSuperAdmin());
    }

    // بيانات المستخدمين: المستخدم يقرأ بياناته، الإداريين يقرؤون كل شيء
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin() || 
        isSuperAdmin()
      );
      allow write: if request.auth != null && (
        request.auth.uid == userId || 
        isSuperAdmin()
      );
    }

    // التقارير: الجميع يقرأ، الكتابة للمسجلين فقط
    match /reports/{reportId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // عمليات الدفع: المستخدمين يقرؤون دفعاتهم، الإداريين يقرؤون كل شيء
    match /payments/{paymentId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.payerId ||
        isAdmin() || 
        isSuperAdmin()
      );
      allow write: if request.auth != null;
    }
    
    // قواعد الإداريين
    match /admins/{adminId} {
      allow read: if request.auth != null && (
        request.auth.uid == adminId || 
        isAdmin() || 
        isSuperAdmin()
      );
      allow write: if request.auth != null && isSuperAdmin();
      allow create: if request.auth != null && isSuperAdmin();
    }
    
    // سجلات نشاطات الإداريين
    match /adminLogs/{logId} {
      allow read: if request.auth != null && (isAdmin() || isSuperAdmin());
      allow write: if request.auth != null && (isAdmin() || isSuperAdmin());
      allow create: if request.auth != null && (isAdmin() || isSuperAdmin());
    }
    
    // دوال مساعدة للتحقق من صلاحيات الإداريين
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
    
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superadmin';
    }

    // ==== القواعد الجديدة المضافة ====
    
    // قاعدة للوكلاء: الجميع يقرأ، الوكيل نفسه فقط يكتب
    match /agents/{agentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == agentId || isAdmin() || isSuperAdmin());
    }
    
    // قاعدة للأكاديميات: الجميع يقرأ، الأكاديمية نفسها فقط تكتب
    match /academies/{academyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == academyId || isAdmin() || isSuperAdmin());
    }
    
    // قاعدة للمدربين: الجميع يقرأ، المدرب نفسه فقط يكتب
    match /trainers/{trainerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == trainerId || isAdmin() || isSuperAdmin());
    }
    
    // قاعدة للكيانات (للبحث): الجميع يقرأ، المالك فقط يكتب
    match /entities/{entityId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == entityId || isAdmin() || isSuperAdmin());
    }
    
    // ==== قواعد الوظائف التفاعلية الجديدة ====
    
    // المفضلة: كل مستخدم مسجل يمكنه القراءة والكتابة
    match /favorites/{favoriteId} {
      allow read, write, create, update, delete: if request.auth != null;
    }
    
    // التقييمات: كل مستخدم مسجل يمكنه القراءة والكتابة
    match /ratings/{ratingId} {
      allow read, write, create, update, delete: if request.auth != null;
    }
    
    // الرسائل: كل مستخدم مسجل يمكنه القراءة والكتابة
    match /messages/{messageId} {
      allow read, write, create, update, delete: if request.auth != null;
    }
    
    // المحادثات: كل مستخدم مسجل يمكنه القراءة والكتابة
    match /conversations/{conversationId} {
      allow read, write, create, update, delete: if request.auth != null;
    }
    
    // الأهداف والمهام: المستخدم يدير أهدافه ومهامه
    match /objectives/{objectiveId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin() || isSuperAdmin());
      allow write: if request.auth != null && (request.auth.uid == request.resource.data.userId || isSuperAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.userId || isSuperAdmin());
    }
    
    match /tasks/{taskId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin() || isSuperAdmin());
      allow write: if request.auth != null && (request.auth.uid == request.resource.data.userId || isSuperAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.userId || isSuperAdmin());
    }
  }
} 